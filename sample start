from fantasy_machine import update_data, import_data
from fantasy_machine import config
from fantasy_machine import stats
from fantasy_machine import model

import pandas as pd
import sqlite3

import numpy as np
from sklearn import linear_model
import matplotlib.pyplot as plt
%matplotlib inline

import warnings
warnings.filterwarnings('ignore')
##############################################################################################################################

# # Update lineups
update_data.update_lineups()
# # ud.update_mapping()
update_data.update_depthchart()

bullpen_dc = {"WHERE":{"pull_time":{"=":"(SELECT MAX(pull_time) FROM {table})".format(
              table=config.depthchart_table)}},"AND":{"position":{"=":"'BULLPEN'"}}}
abr = import_data.get_data(db=config.player_mapping_db, 
                    table=config.team_abr_table)                 # team abr table
lineups = import_data.get_data(db=config.players_db_path,
                        table=config.lineups_table,
                        condition_dict={"WHERE":{"pull_time":{"=":"(SELECT MAX(pull_time) FROM {table})".format(
              table=config.lineups_table)}}})              # lineup table
player_map = import_data.get_data(db=config.player_mapping_db,
                           table=config.player_map_table,
                           cols=import_data.player_id_cols)             # playerid table
lineups_plus = lineups.merge(player_map,left_on=['player_id'],
                             right_on=['rotowire_id'],how='left')
dc = import_data.get_data(db=config.players_db_path,
                   table=config.depthchart_table,
                   condition_dict=bullpen_dc)                    # Bullpen table
bp_ids = dc.merge(player_map,left_on=['player_id'],
                 right_on=['mlb_id'],how='left')

##############################################################################################################################

event = import_data.get_data(db=config.mlb_db_path,
                     table=config.mlb_event_table,
                     condition_dict={'WHERE':import_data.current_year_condition['WHERE']}) # Event Data
calc = stats.baseball_stats.metric_calculator(data=event)
bp_id_list = calc.calculate_v2(df=event,
                               groupby=['pitcher'], 
                               position='pitcher',
                               player_ids=list(bp_ids['retro_id'].dropna()),
                               metric='FIP_v2')